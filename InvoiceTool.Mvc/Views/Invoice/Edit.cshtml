@using InvoiceTool.Mvc.ViewModels.Invoice
@model EditInvoiceViewModel

<h2>Wijzig factuur</h2>

<form asp-action="Edit" method="post" id="invoiceForm">
    <input type="hidden" asp-for="Invoice.Id" />

    <div class="form-group">
        <label asp-for="Invoice.Number"></label>
        <input asp-for="Invoice.Number" class="form-control" required />
    </div>

    <div class="form-group">
        <label asp-for="Invoice.Date"></label>
        <input asp-for="Invoice.Date" type="date" class="form-control" required />
    </div>

    <div class="form-group">
        <label asp-for="Invoice.ExpirationDate"></label>
        <input asp-for="Invoice.ExpirationDate" type="date" class="form-control" required />
    </div>

    <div class="form-group">
        <label asp-for="Invoice.NetPrice"></label>
        <input asp-for="Invoice.NetPrice" class="form-control" readonly id="netPrice" />
    </div>

    <div class="form-group">
        <label asp-for="Invoice.TaxPrice"></label>
        <input asp-for="Invoice.TaxPrice" class="form-control" readonly id="taxPrice" />
    </div>

    <div class="form-group">
        <label asp-for="Invoice.GrossPrice"></label>
        <input asp-for="Invoice.GrossPrice" class="form-control" readonly id="grossPrice" />
    </div>

    <div class="form-group">
        <label asp-for="Invoice.CustomerId">Klant</label>
        <select asp-for="Invoice.CustomerId" class="form-control" asp-items="@(new SelectList(Model.Customers, "Id", "Name"))">
            <option value="">Selecteer een klant</option>
        </select>
    </div>


    <h3>Factuurregels</h3>
    <table class="table">
        <thead>
            <tr>
                <th>Omschrijving</th>
                <th>Stuks prijs</th>
                <th>BTW percentage</th>
                <th>Aantal</th>
                <th>Subtotaal</th>
                <th>Acties</th>
            </tr>
        </thead>
        
        <tbody id="invoiceLinesTable"></tbody>

    </table>

    <button type="button" class="btn btn-primary" onclick="addInvoiceLine()">Regel toevoegen</button>

    <input type="hidden" name="InvoiceLinesJson" id="invoiceLinesInput" value="@Html.Raw(Json.Serialize(Model.Invoice.InvoiceLines))" />

    <button type="submit" class="btn btn-success">Opslaan</button>
</form>


@section Scripts {
    <script>
        $(document).ready(function() {
            getInvoiceLines();
        });

        function getInvoiceLines() {
            let invoiceId = $("#Invoice_Id").val();

            let data = { InvoiceId: invoiceId }

            GetData('/InvoiceLine/GetInvoiceLines', data, 'invoiceLinesTable');
        }


        let invoiceLines = @Html.Raw(Json.Serialize(Model.Invoice.InvoiceLines));

        function addInvoiceLine(id = 0, invoiceId = 0, description = "", unitPrice = 0, taxPercentage = 21, quantity = 1) {
            const index = invoiceLines.length;
            const newRow = `
                <tr id="row-${index}">
                    <td><input type="text" class="form-control" value="${description}" onchange="updateInvoiceLine(${index}, 'Description', this.value)" /></td>
                    <td><input type="number" class="form-control" value="${unitPrice}" step="0.01" onchange="updateInvoiceLine(${index}, 'UnitPrice', this.value)" /></td>
                    <td><input type="number" class="form-control" value="${taxPercentage}" step="1" onchange="updateInvoiceLine(${index}, 'TaxPercentage', this.value)" /></td>
                    <td><input type="number" class="form-control" value="${quantity}" step="0.01" onchange="updateInvoiceLine(${index}, 'Quantity', this.value)" /></td>
                    <td id="subtotal-${index}">${(unitPrice * quantity).toFixed(2)}</td>
                    <td><button type="button" class="btn btn-danger" onclick="removeInvoiceLine(${index}, 0)">Verwijderen</button></td>
                </tr>
            `;

            invoiceLines.push({ Id: id, InvoiceId: invoiceId, Description: description, UnitPrice: unitPrice, TaxPercentage: taxPercentage, Quantity: quantity });
            document.getElementById("invoiceLinesTable").insertAdjacentHTML('beforeend', newRow);
            updateInvoiceData();
        }

        function updateInvoiceLine(index, field, value) {
            invoiceLines[index][field] = field === 'UnitPrice' || field === 'Quantity' || field === 'TaxPercentage' ? parseFloat(value) : value;
            const unitPrice = invoiceLines[index].UnitPrice;
            const quantity = invoiceLines[index].Quantity;
            document.getElementById(`subtotal-${index}`).innerText = (unitPrice * quantity).toFixed(2);
            updateInvoiceData();
        }

        function removeInvoiceLine(index, id) {
            invoiceLines.splice(index, 1);
            document.getElementById(`row-${index}`).remove();

            if(id > 0)
            {
                deleteData(id, '/InvoiceLine/Delete');
            }

            updateInvoiceData();
        }

        function updateInvoiceData() {
            let netPrice = 0;
            let taxPrice = 0;

            invoiceLines.forEach(line => {
                let lineTotal = line.UnitPrice * line.Quantity;
                netPrice += lineTotal;
                taxPrice += lineTotal * (line.TaxPercentage / 100);
            });

            document.getElementById("invoiceForm").addEventListener("submit", function () {
                document.getElementById("invoiceLinesInput").value = JSON.stringify(invoiceLines);
            });
        }
    </script>
}